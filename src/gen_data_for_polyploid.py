# generate random data for polyploid phasing
# you cannot use data generated by this function for exact algorithm of haplotype phasing

import numpy as np
import random

''' data format
N
r
s
M
err_num
ans_list (haplotypes of each row)
hap1
hap2
hap3
...
'''

def rand_except_i(i):
    while True:
        x = random.randint(0, 3)
        if x != i:
            return x
    
def random_data_for_polyploid(read_num, N):
    r = random.randint(read_num - read_num // 10, read_num + read_num // 10)
    s = r
    min_range = read_num // 10
    
    # generate answer of haplotypes
    haplotypes = []
    for i in range(0, N):
        hap = list(np.random.randint(0, 4, size=s))
        haplotypes.append(hap)
    
    # generate allele matrix M and ans_list
    M = []
    ans_list = []
    start_idx = 0
    end_idx = min_range - 1
    err_num = 0
    for i in range(r):
        if (i > 1):
            if random.random() < 1 / N:
                start_idx += 1
                end_idx += 1
            if (end_idx >= s):
                end_idx = s - 1
        hap_num = np.random.randint(0, len(haplotypes))
        ans_list.append(hap_num)
        row = haplotypes[hap_num][:] # copy
        for j in range(0, s):
            if (start_idx <= j and j <= end_idx):
                if (random.random() < 0.01): # 1 % error
                    row[j] = rand_except_i(row[j])
                    err_num += 1
                else:
                    row[j] = haplotypes[hap_num][j]
            else:
                row[j] = -1
        M.append(row)
    
    # check if there is a column with all -1
    valid_columns = []
    del_column_count = 0
    for j in range(s):
        all_negative = True
        for i in range(r):
            if (M[i][j] != -1):
                valid_columns.append(j)
                all_negative = False
                break
        if all_negative:
            del_column_count += 1
    s -= del_column_count
    new_M = [[M[i][j] for j in valid_columns] for i in range(r)]
            
    return r, s, new_M, err_num, ans_list, haplotypes

def gen_data(path, read_num, N):
    # generate random data
    file_num = len(N)
    for i in range(0, file_num):
        n = N[i]
        r, s, M, err_num, ans_list, haplotypes = random_data_for_polyploid(read_num, n)
        file = '{}/input_'.format(path) + str(i) + '.txt'
        with open(file, 'w') as f:
            f.write(str(n) + '\n')
            f.write(str(r) + '\n')
            f.write(str(s) + '\n')
            for row in M:
                f.write(''.join(['-' if char == -1 else str(char) for char in row]) + '\n')
            f.write(str(err_num) + '\n')
            for ans in ans_list:
                f.write(str(ans) + ' ')
            f.write('\n')
            for hap in haplotypes:
                f.write(''.join([str(char) for char in hap]) + '\n')

gen_data('../data/polyploid', 100, [4, 8, 16, 32])