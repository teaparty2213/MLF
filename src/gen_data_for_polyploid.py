# generate random data for polyploid phasing
# you cannot use data generated by this function for exact algorithm of haplotype phasing

import numpy as np
import random

''' data format
N
r
s
M
err_num
ans_list (haplotypes of each row)
hap1
hap2
hap3
...
'''

def rand_except_i(i):
    while True:
        x = random.randint(0, 3)
        if x != i:
            return x
    
def random_data_for_polyploid(r, N):
    s = r
    read_range = 10 # 種によって異なるが今回はヒトゲノムを想定している．ロングリードの長さが10kbp程度でヒトゲノムのSNP密度は1kbpに1つ程度なので．
    
    # generate answer of haplotypes
    haplotypes = []
    '''
    hap0 = list(np.random.randint(0, 4, size=s))
    haplotypes.append(hap0)
    for i in range(1, N):
        C = [random.randint(0, s - 1) for _ in range(0, int(s * 0.5))] # changeable sites
        hap = hap0[:]
        for c in C:
            hap[c] = rand_except_i(hap[c])
        haplotypes.append(hap)'''
    for i in range(0, N):
        hap = list(np.random.randint(0, 4, size=s))
        haplotypes.append(hap)
        
    # generate allele matrix M and ans_list
    M = []
    ans_list = []
    err_num = 0
    #initial 3N reads (0 ~ 3N-1) (各ハプロタイプが各SNPを少なくとも2回カバーするようにしたい)
    for i in range(0, N):
        ans_list.append(i)
        ans_list.append(i)
    for _ in range(0, N):
        ans_list.append(random.randint(0, N - 1))
    random.shuffle(ans_list)
    for i in range(len(ans_list)):
        row = haplotypes[ans_list[i]][:]
        for j in range(0, read_range):
            if random.random() < 0.01: # 1 % error
                row[j] = rand_except_i(row[j])
                err_num += 1
        for j in range(read_range, s):
            row[j] = -1
        M.append(row)
    
    # remaining reads (3N ~ r)
    start_idx = 0
    end_idx = read_range - 1
    for i in range(3 * N, r):
        hap_idx = random.randint(0, N - 1)
        ans_list.append(hap_idx)
        
        if random.random() < 1/N: # 次のリードのstart_idxが1つ進む
            start_idx += 1
            end_idx += 1
        row = haplotypes[hap_idx][:]
        for j in range(0, start_idx):
            row[j] = -1
        for j in range(start_idx, end_idx + 1):
            if random.random() < 0.01: # 1 % error
                row[j] = rand_except_i(row[j])
                err_num += 1
        for j in range(end_idx + 1, s):
            row[j] = -1
        M.append(row)
    
    # check if there is a column with all -1
    valid_columns = []
    del_column_count = 0
    for j in range(0, s):
        all_negative = True
        for i in range(0, r):
            if (M[i][j] != -1):
                valid_columns.append(j)
                all_negative = False
                break
        if all_negative:
            del_column_count += 1
    s -= del_column_count
    new_M = [[M[i][j] for j in valid_columns] for i in range(0, r)]
    new_haplotypes = [[haplotypes[i][j] for j in valid_columns] for i in range(0, N)]
            
    return r, s, new_M, err_num, ans_list, new_haplotypes

def gen_data(path, read_num, N):
    # generate random data
    file_num = len(N)
    for i in range(0, file_num):
        n = N[i]
        r, s, M, err_num, ans_list, haplotypes = random_data_for_polyploid(read_num, n)
        file = '{}/input_'.format(path) + str(i) + '.txt'
        with open(file, 'w') as f:
            f.write(str(n) + '\n')
            f.write(str(r) + '\n')
            f.write(str(s) + '\n')
            for row in M:
                f.write(''.join(['-' if char == -1 else str(char) for char in row]) + '\n')
            f.write(str(err_num) + '\n')
            for ans in ans_list:
                f.write(str(ans) + ' ')
            f.write('\n')
            for hap in haplotypes:
                f.write(''.join([str(char) for char in hap]) + '\n')

gen_data('../data/polyploid', 100, [4, 8, 16])